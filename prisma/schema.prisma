// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ModelType {
  SERVICE
  AUTOMOBILE
}

model OrderItem {
    id              String        @id @default(uuid())
    // modelType       ModelType
    automobileId    String?
    serviceId       String?
    service         Service?       @relation("ServiceToOrderitem", fields: [serviceId], references: [id])
    automobile      Automobile?    @relation(fields: [automobileId], references: [id])
    order           Order[]       @relation("OrderToOrderItem")
    @@index([automobileId])
    @@index([serviceId])
}

model Service {
  id              String      @id @default(uuid())
  name            String
  price           Decimal
  description     String
  // orders          Order[]     @relation("OrderToService")
  orderItem       OrderItem[] @relation("ServiceToOrderitem")  

  
}

model Automobile {
  id              String      @id @default(uuid())
  type            String
  description     String
  price           Decimal
  images          Image[]
  // order           Order[]     @relation("OrderToAutomobile")
  // orderItemId     String?      @unique
  orderItem       OrderItem[]  

  
}

model Image {
  id            String @id @default(uuid())
  automobileId  String
  automobile    Automobile @relation(fields: [automobileId], references: [id], onDelete: Cascade)
  url           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([automobileId])

}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
  id              String @id @default(uuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  role            String?
  accounts      Account[]
  sessions      Session[]
  orders    Order[]  @relation("OrderToUser")

}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Order {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  orderItems    OrderItem[] @relation("OrderToOrderItem")
  // services     Service[] @relation("OrderToService")
  // automobileId String
  // automobile   Automobile @relation("OrderToAutomobile" ,fields: [automobileId], references: [id])
  userId       String
  user         User       @relation("OrderToUser", fields: [userId], references: [id])

  // @@index([automobileId])
  @@index([userId])
}
